{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/fetchGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputCategoryValue","setInputCategoryValue","onSubmit","e","preventDefault","trim","length","oldCategories","type","value","onChange","target","handleCategoryInputChange","GifGridItem","title","url","className","src","alt","fetchGifs","apiUrl","a","fetch","response","ok","console","warn","json","data","gifs","map","item","id","images","fixed_height","GifGrid","category","limit","loading","state","setState","useEffect","then","useFetchGifs","encodeURI","img","GifExpertApp","categories","join","cat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAGaA,EAAc,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,cAAyC,EAEfC,mBAAS,IAFM,mBAE5DC,EAF4D,KAExCC,EAFwC,KAqBnE,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAmBK,OAAOC,OAAS,IACnCR,GAAc,SAAAS,GAAa,OAAKP,GAAL,mBAA4BO,OAEvDN,EAAsB,MAM1B,SACI,uBAAOO,KAAK,OACZC,MAAOT,EAAoBU,SAAW,SAACP,GAAD,OAnBZ,SAACA,GAC/BF,EAAsBE,EAAEQ,OAAOF,OAkBkBG,CAA0BT,S,QCzBtEU,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAE/B,OACI,sBAAKC,UAAU,yCAAf,UACI,6BAAKF,IACL,qBAAKG,IAAKF,EAAKG,IAAKJ,Q,uBCNnBK,EAAS,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEAEEC,MAAMF,GAFR,cAEfG,EAFe,QAGPC,IACVC,QAAQC,KAAK,SAJI,SAMEH,EAASI,OANX,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAS,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAKC,GACTlB,MAAOiB,EAAKjB,MACZC,IAAG,UAAEgB,EAAKE,cAAP,aAAE,EAAaC,aAAanB,QAXlB,kBAgBdc,GAhBc,4CAAH,sDCKTM,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,ECHpB,SAACjB,GAAY,IAAD,EAEVrB,mBAAS,CAC/B6B,KAAM,GACNU,SAAS,IAJuB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAqBpC,OAdAC,qBAAW,WACPtB,EAAUC,GACLsB,MAAM,SAAAT,GAGCO,EAAS,CACLZ,KAAMK,EACNK,SAAS,SAI1B,CAAClB,IAGGmB,EDdyBI,CADpB,0DAAsDC,UAAUR,GAAhE,kBAAmFC,EAAnF,oBADG,qCAEFJ,EAJ+B,EAIrCL,KAAcU,EAJuB,EAIvBA,QAErB,OACI,qCACI,6BAAKF,IACJE,GAAW,mBAAGtB,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQiB,EAAOH,KAAI,SAACe,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIb,aEYtBc,EA5BM,WAEjB,IAFuB,EAGa/C,mBADvB,CAAC,UAFS,mBAGhBgD,EAHgB,KAGJjD,EAHI,KAWvB,OAAQ,qCACJ,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACCiD,EAAWC,KAAK,OACjB,uBACA,6BAEQD,EAAWjB,KAAI,SAAAmB,GAAG,OACd,cAAC,EAAD,CAAmBb,SAAUa,EAAKZ,MAhBpC,IAgBgBY,Y,MCpBlCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5bbf60a7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories, /*limit, setLimit*/ }) => {\r\n\r\n    const [inputCategoryValue, setInputCategoryValue] = useState('');\r\n    //const [inputLimitValue, setInputLimitValue] = useState(limit)\r\n    \r\n    const handleCategoryInputChange = (e) => {\r\n        setInputCategoryValue(e.target.value);\r\n    }\r\n    // const handleLimitInputChange = (e) => {\r\n    //     setInputLimitValue(e.target.value);\r\n    // }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputCategoryValue.trim().length > 2) {\r\n            setCategories(oldCategories => [inputCategoryValue, ...oldCategories,]);\r\n            //setLimit(inputLimitValue);\r\n            setInputCategoryValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" \r\n            value={inputCategoryValue} onChange={ (e) => handleCategoryInputChange(e)} />\r\n            {/* <input type=\"number\" \r\n            value={limit} onChange={ (e) => handleLimitInputChange(e)} /> */}\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n   //setLimit: PropTypes.func.isRequired\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    //console.log({id,title,url});\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <h4>{title}</h4>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const fetchGifs = async (apiUrl) => {\r\n\r\n    const response = await fetch(apiUrl);\r\n    if (!response.ok) {\r\n        console.warn('Error');\r\n    }\r\n    const { data } = await response.json()\r\n    const gifs = data.map(item => {\r\n        return {\r\n            id: item.id,\r\n            title: item.title,\r\n            url: item.images?.fixed_height.url\r\n        };\r\n    })\r\n    \r\n    //console.log(gifs);\r\n    return gifs;\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\n// import { fetchGifs } from '../helpers/fetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({ category, limit }) => {\r\n\r\n    const apiKey = \"1H3c5Ybz7bYQgUPoGaTiMK228pvRc0nK\";\r\n    const apiUrl = `https://api.giphy.com/v1/gifs/search?rating=r&q=${encodeURI(category)}&limit=${limit}&api_key=${apiKey}`;\r\n    const {data: images, loading} = useFetchGifs(apiUrl);\r\n\r\n    return ( \r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { fetchGifs } from '../helpers/fetchGifs';\r\n\r\nexport const useFetchGifs = (apiUrl) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        fetchGifs(apiUrl)\r\n            .then( images => {\r\n                // setTimeout( () => {\r\n                    //console.log(images);\r\n                    setState({\r\n                        data: images,\r\n                        loading: false\r\n                    })\r\n                // }, 1000);\r\n            })\r\n    }, [apiUrl] );\r\n\r\n    \r\n    return state;\r\n}\r\n ","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const list = ['Boobs',];\r\n    const [categories, setCategories] = useState(list);\r\n    //const [limit, setLimit] = useState(20)\r\n    const limit = 20;\r\n    // const addCategory = (newCat) => {\r\n    //     console.log(categories, newCat);\r\n    //     setCategories( [...categories, newCat] );\r\n    // }\r\n\r\n    return (<>\r\n        <h2>- GIFS APP - </h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        {/* <button onClick={ () => addCategory('asd') }>Add</button> */}\r\n        <hr />\r\n        {categories.join(' - ')}\r\n        <hr />\r\n        <ol>\r\n            {\r\n                categories.map(cat =>\r\n                    <GifGrid key={cat} category={cat} limit={limit} />\r\n                )\r\n            }\r\n        </ol>\r\n    </>)\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <GifExpertApp />,\n//   document.getElementById('root')\n// );\n\n"],"sourceRoot":""}